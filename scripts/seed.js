import dotenv from "dotenv";
import mongoose from "mongoose";
import DiaChi from "../models/DiaChi.js";
import ElementPhaseMap from "../models/ElementPhaseMap.js";
import LucThu from "../models/LucThu.js";
import NguHanh from "../models/NguHanh.js";
import QueDon from "../models/QueDon.js";
import SeasonalFiveElements from "../models/seasonalFiveElements.js";
import ThienCan from "../models/ThienCan.js";
import TruongSinhPhase from "../models/TruongSinhPhase.js";
import TuanKhong from "../models/TuanKhong.js";
dotenv.config();

// H√†m k·∫øt n·ªëi CSDL
async function connectDB() {
  await mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
  console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB");
}

// H√†m ng·∫Øt k·∫øt n·ªëi
async function disconnectDB() {
  await mongoose.disconnect();
  console.log("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB");
}

// H√†m seed d·ªØ li·ªáu
async function seedAll() {
  // Xo√° d·ªØ li·ªáu c≈©
  await ThienCan.deleteMany();
  await DiaChi.deleteMany();
  await QueDon.deleteMany();
  await NguHanh.deleteMany();
  console.log("üóëÔ∏è ƒê√£ xo√° d·ªØ li·ªáu c≈©");

  // Thi√™n Can
  const thienCanList = [
    "Gi√°p",
    "·∫§t",
    "B√≠nh",
    "ƒêinh",
    "M·∫≠u",
    "K·ª∑",
    "Canh",
    "T√¢n",
    "Nh√¢m",
    "Qu√Ω",
  ];
  const thienCanDocs = await ThienCan.insertMany(
    thienCanList.map((ten) => ({ ten }))
  );
  console.log("‚úÖ ƒê√£ th√™m Thi√™n Can");

  // ƒê·ªãa Chi
  const diaChiList = [
    "T√Ω",
    "S·ª≠u",
    "D·∫ßn",
    "M√£o",
    "Th√¨n",
    "T·ªµ",
    "Ng·ªç",
    "M√πi",
    "Th√¢n",
    "D·∫≠u",
    "Tu·∫•t",
    "H·ª£i",
  ];
  const diaChiDocs = await DiaChi.insertMany(
    diaChiList.map((ten) => ({ ten }))
  );
  console.log("‚úÖ ƒê√£ th√™m ƒê·ªãa Chi");

  // Ng≈© H√†nh
  await NguHanh.insertMany([
    { ten: "Kim", sinh: "Th·ªßy", khac: "M·ªôc" },
    { ten: "M·ªôc", sinh: "H·ªèa", khac: "Th·ªï" },
    { ten: "Th·ªßy", sinh: "M·ªôc", khac: "H·ªèa" },
    { ten: "H·ªèa", sinh: "Th·ªï", khac: "Kim" },
    { ten: "Th·ªï", sinh: "Kim", khac: "Th·ªßy" },
  ]);
  console.log("‚úÖ ƒê√£ th√™m Ng≈© H√†nh");

  // Qu·∫ª ƒê∆°n
  const queDonData = [
    { tenque: "C√†n", mahatext: "111" },
    { tenque: "ƒêo√†i", mahatext: "011" },
    { tenque: "Ly", mahatext: "101" },
    { tenque: "Ch·∫•n", mahatext: "001" },
    { tenque: "T·ªën", mahatext: "110" },
    { tenque: "Kh·∫£m", mahatext: "010" },
    { tenque: "C·∫•n", mahatext: "100" },
    { tenque: "Kh√¥n", mahatext: "000" },
  ];

  const getRandom = (arr) => arr[Math.floor(Math.random() * arr.length)];

  await QueDon.insertMany(
    queDonData.map((q) => ({
      tenque: q.tenque,
      mahatext: q.mahatext,
      thiencanquenoi: getRandom(thienCanDocs)._id,
      thiencanquengoai: getRandom(thienCanDocs)._id,
      diachiquenoi: [
        getRandom(diaChiDocs)._id,
        getRandom(diaChiDocs)._id,
        getRandom(diaChiDocs)._id,
      ],
      diachiquengoai: [
        getRandom(diaChiDocs)._id,
        getRandom(diaChiDocs)._id,
        getRandom(diaChiDocs)._id,
      ],
    }))
  );
  console.log("‚úÖ ƒê√£ th√™m Qu·∫ª ƒê∆°n");
}
async function seedNguHanh() {
  // Xo√° d·ªØ li·ªáu c≈©
  await NguHanh.deleteMany();

  // Ng≈© H√†nh
  await NguHanh.insertMany([
    { ten: "Kim", sinh: "Th·ªßy", khac: "M·ªôc" },
    { ten: "M·ªôc", sinh: "H·ªèa", khac: "Th·ªï" },
    { ten: "Th·ªßy", sinh: "M·ªôc", khac: "H·ªèa" },
    { ten: "H·ªèa", sinh: "Th·ªï", khac: "Kim" },
    { ten: "Th·ªï", sinh: "Kim", khac: "Th·ªßy" },
  ]);
  console.log("‚úÖ ƒê√£ th√™m Ng≈© H√†nh");

  // Qu·∫ª ƒê∆°n
}
async function seedDiaChiNguHanhOnly() {
  // L·∫•y danh s√°ch Ng≈© H√†nh hi·ªán c√≥ t·ª´ database
  const nguHanhDocs = await NguHanh.find({});
  if (nguHanhDocs.length !== 5) {
    throw new Error("‚ö†Ô∏è D·ªØ li·ªáu b·∫£ng Ng≈© H√†nh kh√¥ng ƒë·∫ßy ƒë·ªß ho·∫∑c ch∆∞a c√≥.");
  }

  // Xo√° d·ªØ li·ªáu ƒê·ªãa Chi c≈©
  await DiaChi.deleteMany();

  // Map ƒê·ªãa Chi -> Ng≈© H√†nh
  const diaChiNguHanhMap = {
    T√Ω: "Th·ªßy",
    S·ª≠u: "Th·ªï",
    D·∫ßn: "M·ªôc",
    M√£o: "M·ªôc",
    Th√¨n: "Th·ªï",
    T·ªµ: "H·ªèa",
    Ng·ªç: "H·ªèa",
    M√πi: "Th·ªï",
    Th√¢n: "Kim",
    D·∫≠u: "Kim",
    Tu·∫•t: "Th·ªï",
    H·ª£i: "Th·ªßy",
  };

  // T·∫°o danh s√°ch ƒê·ªãa Chi c√≥ tham chi·∫øu ƒë√∫ng t·ªõi _id c·ªßa Ng≈© H√†nh
  const diaChiDocs = await DiaChi.insertMany(
    Object.entries(diaChiNguHanhMap).map(([ten, tenNguHanh]) => {
      const nguhanh = nguHanhDocs.find((nh) => nh.ten === tenNguHanh);
      if (!nguhanh) throw new Error(`Kh√¥ng t√¨m th·∫•y ng≈© h√†nh: ${tenNguHanh}`);
      return {
        ten,
        nguhanh: nguhanh._id,
      };
    })
  );

  console.log("‚úÖ ƒê√£ th√™m ƒê·ªãa Chi k√®m Ng≈© H√†nh");
  return diaChiDocs;
}
async function seedQueDonOnly() {
  // L·∫•y d·ªØ li·ªáu c√≥ s·∫µn t·ª´ c√°c b·∫£ng li√™n quan
  const thienCanDocs = await ThienCan.find({});
  const diaChiDocs = await DiaChi.find({});
  const nguHanhDocs = await NguHanh.find({});

  if (
    thienCanDocs.length < 2 ||
    diaChiDocs.length < 6 ||
    nguHanhDocs.length === 0
  ) {
    throw new Error(
      "‚ùå D·ªØ li·ªáu ch∆∞a ƒë·∫ßy ƒë·ªß trong ThienCan, DiaChi ho·∫∑c NguHanh"
    );
  }

  // Xo√° d·ªØ li·ªáu c≈© c·ªßa QueDon
  await QueDon.deleteMany();

  // D·ªØ li·ªáu m·∫´u c·ªßa Qu·∫ª ƒê∆°n
  const queDonData = [
    { tenque: "C√†n", mahatext: "111", nguhanh: "Kim" },
    { tenque: "ƒêo√†i", mahatext: "011", nguhanh: "Kim" },
    { tenque: "Ly", mahatext: "101", nguhanh: "H·ªèa" },
    { tenque: "Ch·∫•n", mahatext: "001", nguhanh: "M·ªôc" },
    { tenque: "T·ªën", mahatext: "110", nguhanh: "M·ªôc" },
    { tenque: "Kh·∫£m", mahatext: "010", nguhanh: "Th·ªßy" },
    { tenque: "C·∫•n", mahatext: "100", nguhanh: "Th·ªï" },
    { tenque: "Kh√¥n", mahatext: "000", nguhanh: "Th·ªï" },
  ];

  // H√†m ch·ªçn ng·∫´u nhi√™n
  const getRandom = (arr, count = 1) => {
    const shuffled = arr.sort(() => 0.5 - Math.random());
    return count === 1 ? shuffled[0] : shuffled.slice(0, count);
  };

  // Ch√®n d·ªØ li·ªáu v√†o b·∫£ng QueDon
  await QueDon.insertMany(
    queDonData.map((q) => {
      const nguhanhDoc = nguHanhDocs.find((nh) => nh.ten === q.nguhanh);
      return {
        tenque: q.tenque,
        mahatext: q.mahatext,
        nguhanh: nguhanhDoc?._id,
        thiencanquenoi: getRandom(thienCanDocs)._id,
        thiencanquengoai: getRandom(thienCanDocs)._id,
        diachiquenoi: getRandom(diaChiDocs, 3).map((d) => d._id),
        diachiquengoai: getRandom(diaChiDocs, 3).map((d) => d._id),
      };
    })
  );

  console.log("‚úÖ ƒê√£ th√™m d·ªØ li·ªáu Qu·∫ª ƒê∆°n");
}
async function seedQueDonFromNames() {
  // L·∫•y d·ªØ li·ªáu ƒë√£ c√≥
  const nguHanhDocs = await NguHanh.find({});
  const thienCanDocs = await ThienCan.find({});
  const diaChiDocs = await DiaChi.find({});

  // T·∫°o map lookup nhanh
  const nguHanhMap = Object.fromEntries(nguHanhDocs.map((n) => [n.ten, n]));
  const thienCanMap = Object.fromEntries(
    thienCanDocs.map((tc) => [tc.ten, tc])
  );
  const diaChiMap = Object.fromEntries(diaChiDocs.map((dc) => [dc.ten, dc]));

  // D·ªØ li·ªáu ƒë·∫ßu v√†o
  const queDonData = [
    {
      tenque: "C√†n",
      mahatext: "111",
      nguhanh: "Kim",
      thiencanquenoi: ["Gi√°p"],
      thiencanquengoai: ["Nh√¢m"],
      diachiquenoi: ["T√Ω", "D·∫ßn", "Th√¨n"],
      diachiquengoai: ["Ng·ªç", "Th√¢n", "Tu·∫•t"],
    },
    {
      tenque: "Kh√¥n",
      mahatext: "000",
      nguhanh: "Th·ªï",
      thiencanquenoi: ["·∫§t"],
      thiencanquengoai: ["Qu√Ω"],
      diachiquenoi: ["M√πi", "T·ªã", "M√£o"],
      diachiquengoai: ["S·ª≠u", "H·ª£i", "D·∫≠u"],
    },
    {
      tenque: "C·∫•n",
      mahatext: "001",
      nguhanh: "Th·ªï",
      thiencanquenoi: ["B√≠nh"],
      thiencanquengoai: ["B√≠nh"],
      diachiquenoi: ["Th√¨n", "Ng·ªç", "Th√¢n"],
      diachiquengoai: ["Tu·∫•t", "T√Ω", "D·∫ßn"],
    },
    {
      tenque: "ƒêo√†i",
      mahatext: "011",
      nguhanh: "Kim",
      thiencanquenoi: ["ƒêinh"],
      thiencanquengoai: ["ƒêinh"],
      diachiquenoi: ["T·ªã", "M√£o", "S·ª≠u"],
      diachiquengoai: ["H·ª£i", "D·∫≠u", "M√πi"],
    },
    {
      tenque: "Kh·∫£m",
      mahatext: "010",
      nguhanh: "Th·ªßy",
      thiencanquenoi: ["M·∫≠u"],
      thiencanquengoai: ["M·∫≠u"],
      diachiquenoi: ["D·∫ßn", "Th√¨n", "Ng·ªç"],
      diachiquengoai: ["Th√¢n", "Tu·∫•t", "T√Ω"],
    },
    {
      tenque: "Ly",
      mahatext: "101",
      nguhanh: "H·ªèa",
      thiencanquenoi: ["K·ª∑"],
      thiencanquengoai: ["K·ª∑"],
      diachiquenoi: ["M√£o", "S·ª≠u", "H·ª£i"],
      diachiquengoai: ["D·∫≠u", "M√πi", "T·ªã"],
    },
    {
      tenque: "Ch·∫•n",
      mahatext: "100",
      nguhanh: "M·ªôc",
      thiencanquenoi: ["Canh"],
      thiencanquengoai: ["Canh"],
      diachiquenoi: ["T√Ω", "D·∫ßn", "Th√¨n"],
      diachiquengoai: ["Ng·ªç", "Th√¢n", "Tu·∫•t"],
    },
    {
      tenque: "T·ªën",
      mahatext: "110",
      nguhanh: "M·ªôc",
      thiencanquenoi: ["T√¢n"],
      thiencanquengoai: ["T√¢n"],
      diachiquenoi: ["S·ª≠u", "H·ª£i", "D·∫≠u"],
      diachiquengoai: ["M√πi", "T·ªã", "M√£o"],
    },
  ];

  // Xo√° d·ªØ li·ªáu c≈©
  await QueDon.deleteMany();

  // Insert
  const queDonDocs = queDonData.map((q) => {
    const nguhanh = nguHanhMap[q.nguhanh]?._id;

    const thiencanquenoi = q.thiencanquenoi
      .map((t) => thienCanMap[t]?._id)
      .filter(Boolean)[0]; // l·∫•y 1 ph·∫ßn t·ª≠ (v√¨ l√† 1 ObjectId)

    const thiencanquengoai = q.thiencanquengoai
      .map((t) => thienCanMap[t]?._id)
      .filter(Boolean)[0];

    const diachiquenoi = q.diachiquenoi
      .map((d) => diaChiMap[d]?._id)
      .filter(Boolean);

    const diachiquengoai = q.diachiquengoai
      .map((d) => diaChiMap[d]?._id)
      .filter(Boolean);

    return {
      tenque: q.tenque,
      mahatext: q.mahatext,
      nguhanh,
      thiencanquenoi,
      thiencanquengoai,
      diachiquenoi,
      diachiquengoai,
    };
  });

  await QueDon.insertMany(queDonDocs);
  console.log("‚úÖ ƒê√£ th√™m Qu·∫ª ƒê∆°n t·ª´ t√™n");
}

// H√†m main ch·ªâ x·ª≠ l√Ω lu·ªìng ch·∫°y
async function main() {
  try {
    await connectDB();
    // await seedVongTruongSinh();
    await seedSeasonalFiveElements();
    await disconnectDB();
  } catch (err) {
    console.error("‚ùå L·ªói:", err);
    process.exit(1);
  }
}

main();
const queDonData = [
  {
    tenque: "C√†n",
    mahatext: "111",
    nguhanh: "Kim",
    thiencanquenoi: ["Gi√°p"],
    thiencanquengoai: ["Nh√¢m"],
    diachiquenoi: ["T√Ω", "S·ª≠u", "D·∫ßn"],
    diachiquengoai: ["M√£o", "Th√¨n", "T·ªµ"],
  },
];

async function seedThienCan() {
  await ThienCan.deleteMany();
  await LucThu.deleteMany();

  // 1. Insert d·ªØ li·ªáu LucThu
  const lucThuNames = [
    "Thanh Long",
    "Chu T∆∞·ªõc",
    "Huy·ªÅn V≈©",
    "B·∫°ch H·ªï",
    "C√¢u Tr·∫ßn",
    "ƒê·∫±ng X√†",
  ];

  const insertedLucThu = await LucThu.insertMany(
    lucThuNames.map((ten) => ({ ten }))
  );

  // 2. T·∫°o map t·ª´ t√™n => _id
  const lucThuMap = {};
  insertedLucThu.forEach((lt) => {
    lucThuMap[lt.ten] = lt._id;
  });

  // 3. D·ªØ li·ªáu ThienCan (v·∫´n l√† t√™n LucThu)
  const thiencanDataRaw = [
    {
      ten: "Gi√°p",
      lucThu: [
        "Thanh Long",
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
      ],
    },
    {
      ten: "·∫§t",
      lucThu: [
        "Thanh Long",
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
      ],
    },
    {
      ten: "B√≠nh",
      lucThu: [
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
        "Thanh Long",
      ],
    },
    {
      ten: "ƒêinh",
      lucThu: [
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
        "Thanh Long",
      ],
    },
    {
      ten: "M·∫≠u",
      lucThu: [
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
        "Thanh Long",
        "Chu T∆∞·ªõc",
      ],
    },
    {
      ten: "K·ª∑",
      lucThu: [
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
        "Thanh Long",
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
      ],
    },
    {
      ten: "Canh",
      lucThu: [
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
        "Thanh Long",
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
      ],
    },
    {
      ten: "T√¢n",
      lucThu: [
        "B·∫°ch H·ªï",
        "Huy·ªÅn V≈©",
        "Thanh Long",
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
      ],
    },
    {
      ten: "Nh√¢m",
      lucThu: [
        "Huy·ªÅn V≈©",
        "Thanh Long",
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
      ],
    },
    {
      ten: "Qu√Ω",
      lucThu: [
        "Huy·ªÅn V≈©",
        "Thanh Long",
        "Chu T∆∞·ªõc",
        "C√¢u Tr·∫ßn",
        "ƒê·∫±ng X√†",
        "B·∫°ch H·ªï",
      ],
    },
  ];

  // 4. Chuy·ªÉn t√™n LucThu th√†nh _id
  const thiencanData = thiencanDataRaw.map((tc) => ({
    ten: tc.ten,
    lucThu: tc.lucThu.map((name) => lucThuMap[name]),
  }));

  // 5. Insert v√†o ThienCan
  await ThienCan.insertMany(thiencanData);
  console.log("‚úÖ ƒê√£ th√™m Thi√™n Can k√®m ƒë√∫ng LucThu");
}

async function seedTuanKhong() {
  const tuankhongData = [
    {
      tuangiap: [
        "Gi√°p T√Ω",
        "·∫§t S·ª≠u",
        "B√≠nh D·∫ßn",
        "ƒêinh M√£o",
        "M·∫≠u Th√¨n",
        "K·ª∑ T·ªµ",
        "Canh Ng·ªç",
        "T√¢n M√πi",
        "Nh√¢m Th√¢n",
        "Qu√Ω D·∫≠u",
      ],
      tuankhong: ["Tu·∫•t,H·ª£i"],
    },
    {
      tuangiap: [
        "Gi√°p Tu·∫•t",
        "·∫§t H·ª£i",
        "B√≠nh T√Ω",
        "ƒêinh S·ª≠u",
        "M·∫≠u D·∫ßn",
        "K·ª∑ M√£o",
        "Canh Th√¨n",
        "T√¢n T·ªµ",
        "Nh√¢m Ng·ªç",
        "Qu√Ω M√πi",
      ],
      tuankhong: ["Th√¢n,D·∫≠u"],
    },
    {
      tuangiap: [
        "Gi√°p Th√¢n",
        "·∫§t D·∫≠u",
        "B√≠nh Tu·∫•t",
        "ƒêinh H·ª£i",
        "M·∫≠u T√Ω",
        "K·ª∑ S·ª≠u",
        "Canh D·∫ßn",
        "T√¢n M√£o",
        "Nh√¢m Th√¨n",
        "Qu√Ω T·ªµ",
      ],
      tuankhong: ["Ng·ªç,M√πi"],
    },
    {
      tuangiap: [
        "Gi√°p Ng·ªç",
        "·∫§t M√πi",
        "B√≠nh Th√¢n",
        "ƒêinh D·∫≠u",
        "M·∫≠u Tu·∫•t",
        "K·ª∑ H·ª£i",
        "Canh T√Ω",
        "T√¢n S·ª≠u",
        "Nh√¢m D·∫ßn",
        "Qu√Ω M√£o",
      ],
      tuankhong: ["Th√¨n,T·ªµ"],
    },
    {
      tuangiap: [
        "Gi√°p Th√¨n",
        "·∫§t T·ªµ",
        "B√≠nh Ng·ªç",
        "ƒêinh M√πi",
        "M·∫≠u Th√¢n",
        "K·ª∑ D·∫≠u",
        "Canh Tu·∫•t",
        "T√¢n H·ª£i",
        "Nh√¢m T√Ω",
        "Qu√Ω S·ª≠u",
      ],
      tuankhong: ["D·∫ßn,M√£o"],
    },
    {
      tuangiap: [
        "Gi√°p D·∫ßn",
        "·∫§t M√£o",
        "B√≠nh Th√¨n",
        "ƒêinh T·ªµ",
        "M·∫≠u Ng·ªç",
        "K·ª∑ M√πi",
        "Canh Th√¢n",
        "T√¢n D·∫≠u",
        "Nh√¢m Tu·∫•t",
        "Qu√Ω H·ª£i",
      ],
      tuankhong: ["T√Ω,S·ª≠u"],
    },
  ];
  await TuanKhong.deleteMany();
  await TuanKhong.insertMany(tuankhongData);
  console.log("‚úÖ ƒê√£ th√™m Tuan Kh√¥ng");
}
export async function seedVongTruongSinh() {
  try {
    // D·ªØ li·ªáu Tr∆∞·ªùng Sinh (12 giai ƒëo·∫°n)
    const phaseData = [
      { name: "Tr∆∞·ªùng Sinh", description: "B·∫Øt ƒë·∫ßu sinh ra", order: 1 },
      { name: "M·ªôc D·ª•c", description: "T·∫Øm r·ª≠a", order: 2 },
      { name: "Qu√°n ƒê·ªõi", description: "M·∫∑c √°o", order: 3 },
      { name: "L√¢m Quan", description: "Tr∆∞·ªüng th√†nh", order: 4 },
      { name: "ƒê·∫ø V∆∞·ª£ng", description: "C·ª±c th·ªãnh", order: 5 },
      { name: "Suy", description: "B·∫Øt ƒë·∫ßu suy gi·∫£m", order: 6 },
      { name: "B·ªánh", description: "C√≥ b·ªánh", order: 7 },
      { name: "T·ª≠", description: "Ch·∫øt", order: 8 },
      { name: "M·ªô", description: "Ch√¥n", order: 9 },
      { name: "Tuy·ªát", description: "Tan r√£", order: 10 },
      { name: "Thai", description: "C√≥ m·∫ßm s·ªëng m·ªõi", order: 11 },
      { name: "D∆∞·ª°ng", description: "Nu√¥i thai", order: 12 },
    ];

    // D·ªØ li·ªáu mapping H√†nh - Can - Chi Tr∆∞·ªùng Sinh
    const mapData = [
      { hanh: "Kim", can: ["Canh", "T√¢n"], truongSinhChi: "T·ªµ" },
      { hanh: "M·ªôc", can: ["Gi√°p", "·∫§t"], truongSinhChi: "H·ª£i" },
      { hanh: "Th·ªßy", can: ["Nh√¢m", "Qu√Ω"], truongSinhChi: "Th√¢n" },
      { hanh: "H·ªèa", can: ["B√≠nh", "ƒêinh"], truongSinhChi: "D·∫ßn" },
      { hanh: "Th·ªï", can: ["M·∫≠u", "K·ª∑"], truongSinhChi: "Th√¢n" },
    ];

    // Xo√° d·ªØ li·ªáu c≈©
    await TruongSinhPhase.deleteMany();
    await ElementPhaseMap.deleteMany();

    // Th√™m d·ªØ li·ªáu m·ªõi
    await TruongSinhPhase.insertMany(phaseData);
    await ElementPhaseMap.insertMany(mapData);

    console.log("‚úÖ D·ªØ li·ªáu v√≤ng Tr∆∞·ªùng Sinh ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng.");
  } catch (error) {
    console.error("‚ùå L·ªói khi seed d·ªØ li·ªáu v√≤ng Tr∆∞·ªùng Sinh:", error);
  }
}
async function seedSeasonalFiveElements() {
  const seedData = [
    {
      season: "Xu√¢n",
      lunarMonths: [1, 2],
      daysRange: "T·ª´ 01/01 ƒë·∫øn 12/03",
      durationDays: 72,
      elements: {
        vuong: "M·ªôc",
        tuong: "H·ªèa",
        huu: "Th·ªßy",
        tu: "Kim",
        tuTu: "Th·ªï",
      },
    },
    {
      season: "H·∫°",
      lunarMonths: [4, 5],
      daysRange: "T·ª´ 01/04 ƒë·∫øn 12/06",
      durationDays: 72,
      elements: {
        vuong: "H·ªèa",
        tuong: "Th·ªï",
        huu: "M·ªôc",
        tu: "Kim",
        tuTu: "Th·ªßy",
      },
    },
    {
      season: "Thu",
      lunarMonths: [7, 8],
      daysRange: "T·ª´ 01/07 ƒë·∫øn 12/09",
      durationDays: 72,
      elements: {
        vuong: "Kim",
        tuong: "Th·ªßy",
        huu: "Th·ªï",
        tu: "H·ªèa",
        tuTu: "M·ªôc",
      },
    },
    {
      season: "ƒê√¥ng",
      lunarMonths: [10, 11],
      daysRange: "T·ª´ 01/10 ƒë·∫øn 12/12",
      durationDays: 72,
      elements: {
        vuong: "Th·ªßy",
        tuong: "M·ªôc",
        huu: "Kim",
        tu: "Th·ªï",
        tuTu: "H·ªèa",
      },
    },
    {
      season: "Th√°ng T·ª© Qu√Ω",
      lunarMonths: [3, 6, 9, 12],
      daysRange: "T·ª´ ng√†y 13 ƒë·∫øn 30 (c√°c th√°ng 3, 6, 9, 12)",
      durationDays: 72,
      elements: {
        vuong: "Th·ªï",
        tuong: "Kim",
        huu: "H·ªèa",
        tu: "M·ªôc",
        tuTu: "Th·ªßy",
      },
    },
  ];
  await SeasonalFiveElements.deleteMany();
  await SeasonalFiveElements.insertMany(seedData);
  console.log("‚úÖ ƒê√£ th√™m D·ªØ li·ªáu v√≤ng Tr∆∞·ªùng Sinh");
}
